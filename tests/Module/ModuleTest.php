<?php

namespace Tests\Module;

use Tests\TestCase;
use Nwidart\Modules\Facades\Module;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Illuminate\Support\Facades\DB;

use Modules\Administration\Entities\User;
use Modules\Administration\Entities\Group;

class ModuleTest extends TestCase
{
    use DatabaseTransactions;

    private $testUserName = 'juan.espanol';
    private $testName = 'Juan';
    private $testLastName = 'Espanol';

    private $testGroupName = 'Test';
    private $testGroupDesc = 'Group for Testing';

    public function setUp()
    {
        parent::setUp();
        DB::enableQueryLog();
    }

    public function tearDown()
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    public function test_Administration_module_exists()
    {
        $admin = Module::find('Administration');
        print_r(DB::getQueryLog());

        $this->assertNotNull($admin, 'Administration module does not exist');
    }
/*
    // TODO: Move to TAU/Modules/Administration/Tests
    public function test_create_User_Entity()
    {
        $user = factory(User::class)->create([
            'USUARIO_RED' => $this->testUserName,
            'NOMBRE' => $this->testName,
            'APELLIDOS' => $this->testLastName
        ]);
        DB::getQueryLog();

        $this->assertNotNull($user, 'Can not create Administration\Entities\User');

        $this->assertDatabaseHas('usuario', [
            'USUARIO_RED' => $this->testUserName,
            'NOMBRE' => $this->testName,
            'APELLIDOS' => $this->testLastName
        ]);
    }

    // TODO: Move to TAU/Modules/Administration/Tests
    public function test_create_Group_Entity()
    {
        $group = factory(Group::class)->create();
        DB::getQueryLog();

        $this->assertNotNull($group, 'Can not create Administration\Entities\Group');

        $this->assertDatabaseHas('grupo', [
            'NOMBRE' => $this->testGroupName,
            'DESCRIPCION' => $this->testGroupDesc
        ]);
    }

    public function User_BelongsTo_No_Groups(){
        $user = factory(User::class)->create();

        $this->assertDatabaseMissing('usuario_grupo', [
            //'ID_USUARIO' => 4
            'ID_USUARIO' => $user->ID_USUARIO
        ]);
    }

    public function test_User_BelongsTo_A_One_Group_Only(){
        //$user = factory(User::class)->create();

        $this->assertDatabaseHas('usuario_grupo', [
            'ID_USUARIO' => 0
        ]);
    }

    public function test_User_HasMany_Groups(){
        // TODO:
        /#*
        $user = factory(User::class)->create();
        $groupA = factory(Group::class)->create();
        $groupB = factory(Group::class)->create();

        $user->groups(array($groupA->id, $groupB->id));
        *#/
        $this->assertDatabaseHas('usuario_grupo', [
            'ID_USUARIO' => 1,
            'ID_GRUPO' => 1
        ]);

        $this->assertDatabaseHas('usuario_grupo', [
            'ID_USUARIO' => 1,
            'ID_GRUPO' => 2
        ]);
    }

    public function test_Group_HasMany_Users(){ // TODO:
        $this->assertDatabaseHas('usuario_grupo', [
            'ID_USUARIO' => 1,
            'ID_GRUPO' => 1
        ]);

        $this->assertDatabaseHas('usuario_grupo', [
            'ID_USUARIO' => 1,
            'ID_GRUPO' => 2
        ]);
    }
*/
}
