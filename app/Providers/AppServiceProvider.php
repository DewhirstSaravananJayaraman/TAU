<?php

namespace App\Providers;

use Illuminate\Support\ServiceProvider;

class AppServiceProvider extends ServiceProvider
{
    //protected  $defer = true;

    /**
     * Bootstrap any application services.
     *
     * @return void
     */
    public function boot()
    {
        //echo 'Se ha llamado a boot() de AppServiceProvider: '. get_class($this->app->make('Tests\Integration\Providers\Alguien')).PHP_EOL;
        //echo 'Se ha llamado a boot() de AppServiceProvider: '.PHP_EOL;
    }

    /**
     * Register any application services.
     *
     * @return void
     */
    public function register()
    {
        //echo 'Se ha llamado a register() de AppServiceProvider: '.$this->app->environment().PHP_EOL;

        $this->registerCommandsHandlerBindings();

        /**/

        /*$this->app->when('Modules\Administration\Http\Controllers')
            ->needs('$who')
            ->give($this->app->make('SomeInterface'));*/
    }

    public function provides()
    {
        //echo 'Se ha llamado a provides() de AppServiceProvider'.PHP_EOL;
        return parent::provides(); // TODO: Change the autogenerated stub
    }

    private function registerCommandsHandlerBindings(){ // TODO: Move to Module's Providers folder
        if( $this->app->environment() === 'testing' ){ // TODO: Move to phpunit's App bootstrap
            $this->registerUserRepositoryForTesting();
            $this->registerCommandsHandlerForTesting();
        }else{
            $this->registerUserRepository();
            $this->registerCommandsHandler();
        }
    }

    private function registerUserRepositoryForTesting(){
        $this->app->bind('Modules\Administration\Repositories\Repository',
            'Modules\Administration\Repositories\ArrayRepository\User');
    }

    private function registerCommandsHandlerForTesting(){
        $this->app->bind('Modules\Administration\Commands\Handler\Handler',
            'Modules\Administration\Tests\Commands\StubJsonCommandHandler');

    }

    private function registerUserRepository(){
        $this->app->bind('Modules\Administration\Repositories\Repository',
            'Modules\Administration\Repositories\Eloquent\User');
    }

    private function registerCommandsHandler(){
        $this->app->bind('Modules\Administration\Commands\Handler\Handler',
            'Modules\Administration\Commands\Handler\IndexUser'); // TODO: Use a different CommandHandler for each Command
    }
}
